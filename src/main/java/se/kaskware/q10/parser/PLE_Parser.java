/* PLE_Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PLE_Parser.java */
package se.kaskware.q10.parser;

import se.kaskware.q10.parser.helper.LobReference;
import se.kaskware.q10.parser.helper.ProductLineReference;
import se.kaskware.q10.parser.helper.RuleReference;

import java.io.*;
import java.util.List;
import java.util.Properties;

/** This is the grammar for HPL, written in 'jtt'. */
public class PLE_Parser/*@bgen(jjtree)*/implements PLE_ParserTreeConstants, PLE_ParserConstants {/*@bgen(jjtree)*/
  protected JJTPLE_ParserState jjtree = new JJTPLE_ParserState();
  public static Properties s_parserProperties;

  private boolean attemptErrorRecovery = false;

  public boolean getAttemptErrorRecovery() {
    return attemptErrorRecovery;
  }
  public void setAttemptErrorRecovery(boolean val) {
    attemptErrorRecovery = val;
  }

  private void handleParseError(ParseException e) throws ParseException {
    System.out.println("========================================================================================");
    System.out.println("Error at line " + getToken(1).beginLine + ": " + getToken(1).image );
    System.out.println("Statement not recognised");
    e.printStackTrace();
//    error_skiptobefore(EOL);
  }

  public String dropCitaionMarks(String str) {
    int start = 0, end = str.length();
    boolean doIt = false;

    if (str.charAt(0) == '"') { start = 1; doIt = true; }
    if (str.charAt(end-1) == '"') { end--; doIt = true; }
    return doIt ? str.substring(start, end): str;  // drop citationmarks if any
  }

  public String getProperty(String varName) {
    String propValue = s_parserProperties.getProperty(varName);
    return System.getProperty(varName, propValue);  // overrides propertiesfile
  }

  public static void loadProperties(String buildProps, String targetProps) {
    try {
      if (s_parserProperties == null) {
        s_parserProperties = new Properties();
        s_parserProperties.load(new FileInputStream(buildProps));
        s_parserProperties.load(new FileInputStream(targetProps));
      }
    }
    catch (IOException e) {
      System.out.println("No hpl.properties file found. Great chance for none functional genarated files.");
    }
  }

  protected boolean checkItemIdentifier(String prefix, String id) {
    int start = id.indexOf('_');
    if (start < 0) return false;
    return prefix.equalsIgnoreCase(id.substring(0, start));
  }

  public static void main(String args[]) throws ParseException, SemanticException {
    PLE_Parser parser;

/*    String args[] = {
      "-spec", m_specFile,
      "-buildprops", m_targetenv,
      "-targetprops", m_properties
    }; */

    if (args.length == 1) {
      String parseFile = null, buildProps = null, targetProps = null;
      try {
        parseFile = args[0];
//        buildProps  = args[1];
//        targetProps = args[2];

        System.out.println("PLE_Parser: Reading product specification from file " + parseFile);

//        loadProperties(buildProps, targetProps);
        parser = new PLE_Parser(new FileInputStream(parseFile));
      } catch (FileNotFoundException e) {
        System.out.println("PLE_Parser:  File " + parseFile + " or " + buildProps  + " or " + targetProps + " not found.");
        return;
      }
    }
    else
      throw new ParseException("PLE_Parser: Usage is"
                               + " 'java PLE_Parser <inputfile> -doWsdl <bool> -doService <bool> -doBuild <bool>"
                               + " -buildProps <propFile> -targetProps <propFile>'");

    try {
      parser.setAttemptErrorRecovery(true);
      long start = System.currentTimeMillis();
      ASTLagret node = parser.lagret();
      System.out.println("parsing took: " + ((System.currentTimeMillis() - start) / 1000.0 ) + " seconds");
      start = System.currentTimeMillis();
      node.resolveReferences();
      System.out.println("resolvning references took: " + ((System.currentTimeMillis() - start) / 1000.0 ) + " seconds");
      node.dump("");

      System.out.println("PLE_Parser:  Parsing completed successfully.");
    } catch (ParseException pe) {
      System.out.println("PLE_Parser:  Encountered errors during parse.");
      pe.printStackTrace();
      throw pe;
    }
//    catch (SemanticException se) {
//      System.out.println("PLE_Parser:  Encountered errors during parse.");
//      se.printStackTrace();
//      throw se;
//    }
  }

/* grammer rules and actions follow */
  final public   ASTLagret lagret() throws ParseException {/*@bgen(jjtree) Lagret */
  ASTLagret jjtn000 = new ASTLagret(this, JJTLAGRET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LP);
      jj_consume_token(LAGRET);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LP:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(2)) {
          product();
jjtn000.register((ASTProduct)jjtree.popNode());
        } else if (jj_2_2(2)) {
          lob();
jjtn000.register((ASTLob)jjtree.popNode());
        } else if (jj_2_3(2)) {
          productLine();
jjtn000.register((ASTProductLine)jjtree.popNode());
        } else if (jj_2_4(2)) {
          rule();
jjtn000.register((ASTRule)jjtree.popNode());
        } else if (jj_2_5(2)) {
          dataDictionary();
        } else if (jj_2_6(2)) {
          coefficienter();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RP);
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public void lob() throws ParseException {/*@bgen(jjtree) Lob */
     ASTLob jjtn000 = new ASTLob(this, JJTLOB);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);ASTDocumentation doc;
     String lobID;
    try {
      jj_consume_token(LP);
      jj_consume_token(LOB);
      lobID = itemIdentifier("lob");
      doc = documentation();
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setIdentifier(lobID);
       jjtn000.setDocumentation(doc);
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void productLine() throws ParseException {/*@bgen(jjtree) ProductLine */
     ASTProductLine jjtn000 = new ASTProductLine(this, JJTPRODUCTLINE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);ASTDocumentation doc;
     String prodLineID;
    try {
      jj_consume_token(LP);
      jj_consume_token(PRODLINE);
      prodLineID = itemIdentifier("prodLine");
      doc = documentation();
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setIdentifier(prodLineID);
       jjtn000.setDocumentation(doc);
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void rule() throws ParseException {/*@bgen(jjtree) Rule */
     ASTRule jjtn000 = new ASTRule(this, JJTRULE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);ASTDocumentation doc;
     String ruleID;
    try {
      jj_consume_token(LP);
      jj_consume_token(RULE);
      ruleID = itemIdentifier("rule");
      doc = documentation();
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setIdentifier(ruleID);
       jjtn000.setDocumentation(doc);
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public ASTDataDictionary dataDictionary() throws ParseException {/*@bgen(jjtree) DataDictionary */
     ASTDataDictionary jjtn000 = new ASTDataDictionary(this, JJTDATADICTIONARY);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);ASTDocumentation doc;
     String ddID;
    try {
      jj_consume_token(LP);
      jj_consume_token(DATADICTION);
      ddID = itemIdentifier("dd");
      doc = documentation();
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setIdentifier(ddID);
       jjtn000.setDocumentation(doc);
       {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTCoefficienter coefficienter() throws ParseException {/*@bgen(jjtree) Coefficienter */
     ASTCoefficienter jjtn000 = new ASTCoefficienter(this, JJTCOEFFICIENTER);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);ASTDocumentation doc;
     String coffID;
    try {
      jj_consume_token(LP);
      jj_consume_token(COEFFICIENT);
      coffID = itemIdentifier("coff");
      doc = documentation();
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setIdentifier(coffID);
       jjtn000.setDocumentation(doc);
       {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
    throw new Error("Missing return statement in function");
  }

/*
    (PRODUCT product_2323
      (DOCUMENTATION
        (VERSION "12" "24")
        (SLOGAN "bla bla bla")
        (DESCRIPTION "bla bla bla")
        (CHANGEITEM (((AUTHOR "Per Leander")(WHEN "20170102 18:18")))))
      (LOB lob_353)
      (PRODUCTLINE prodLine_6878)
      (RULE rule_1231))
  */
  final public   void product() throws ParseException {/*@bgen(jjtree) Product */
     ASTProduct jjtn000 = new ASTProduct(this, JJTPRODUCT);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);ASTDocumentation doc;
     String prodID, lobId, prodLineId, ruleId;
    try {
      jj_consume_token(LP);
      jj_consume_token(PRODUCT);
      prodID = itemIdentifier("product");
      doc = documentation();
      jj_consume_token(LP);
      jj_consume_token(LOB);
      lobId = itemIdentifier("lob");
      jj_consume_token(RP);
      jj_consume_token(LP);
      jj_consume_token(PRODLINE);
      prodLineId = itemIdentifier("prodline");
      jj_consume_token(RP);
      jj_consume_token(LP);
      jj_consume_token(RULE);
      ruleId = itemIdentifier("rule");
      jj_consume_token(RP);
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setIdentifier(prodID);
       jjtn000.setDocumentation(doc);
       jjtn000.setReference(new LobReference(lobId));
       jjtn000.setReference(new ProductLineReference(prodLineId));
       jjtn000.setReference(new RuleReference(ruleId));
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

/*
  (DOCUMENTATION
    (VERSION "12" "24")
    (SLOGAN "bla bla bla")
    (DESCRIPTION "bla bla bla")
    (CHANGEITEMS (((AUTHOR "Per Leander")(WHEN "20170102 18:18")))))
 */
  final public   ASTDocumentation documentation() throws ParseException {/*@bgen(jjtree) Documentation */
     ASTDocumentation jjtn000 = new ASTDocumentation(this, JJTDOCUMENTATION);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);ASTDocumentation doc;
     String text;
    try {
      jj_consume_token(LP);
      jj_consume_token(DOCUMENTATION);
      version(jjtn000);
      slogan(jjtn000);
      description(jjtn000);
      changeItems(jjtn000);
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

/* (VERSION "12" "24")  */
  final public   void version(ASTDocumentation doc) throws ParseException {int major, minor;
    jj_consume_token(LP);
    jj_consume_token(VERSION);
    major = integer();
    minor = integer();
    jj_consume_token(RP);
doc.setVersion(major, minor);
  }

/* (SLOGAN "bla bla bla") */
  final public   void slogan(ASTDocumentation doc) throws ParseException {String text;
    jj_consume_token(LP);
    jj_consume_token(SLOGAN);
    text = string();
    jj_consume_token(RP);
doc.setSlogan(text);
  }

/* (DESCRIPTION "bla bla bla") */
  final public   void description(ASTDocumentation doc) throws ParseException {String text;
    jj_consume_token(LP);
    jj_consume_token(DESCRIPTION);
    text = string();
    jj_consume_token(RP);
doc.setDescription(text);
  }

/* (CHANGEITEM (((AUTHOR "Per Leander")(WHEN "20170102 18:18"))))) */
  final public   void changeItems(ASTDocumentation doc) throws ParseException {ASTChangeItem item;
    jj_consume_token(LP);
    jj_consume_token(CHANGEITEMS);
    jj_consume_token(LP);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LP:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      changeItem();
doc.addChangeItem((ASTChangeItem)jjtree.popNode());
    }
    jj_consume_token(RP);
    jj_consume_token(RP);

  }

/* (CHANGEITEM (((AUTHOR "Per Leander")(WHEN "20170102 18:18"))))) */
  final public   void changeItem() throws ParseException {/*@bgen(jjtree) ChangeItem */
     ASTChangeItem jjtn000 = new ASTChangeItem(this, JJTCHANGEITEM);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);String name, date;
    try {
      jj_consume_token(LP);
      jj_consume_token(LP);
      jj_consume_token(AUTHOR);
      name = string();
      jj_consume_token(RP);
      jj_consume_token(LP);
      jj_consume_token(WHEN);
      date = string();
      jj_consume_token(RP);
      jj_consume_token(RP);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
jjtn000.setChange(name, date);
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

//   ASTValueString description() : {
//      ASTValueString doc;
//   }
//   {
//      <DESCRIPTION> doc = valueString() { return doc; }
//   }
  final public
   ASTValueble valueble() throws ParseException {/*@bgen(jjtree) Valueble */
      ASTValueble jjtn000 = new ASTValueble(this, JJTVALUEBLE);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);ASTValue val;
      ASTVariable var;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case STRING_LITERAL:{
        val = value();
jjtn000.setValue(val); {if ("" != null) return jjtn000;}
        break;
        }
      case DOL:{
        var = variable();
jjtn000.setVariable(var); {if ("" != null) return jjtn000;}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTValue value() throws ParseException {/*@bgen(jjtree) Value */
      ASTValue jjtn000 = new ASTValue(this, JJTVALUE);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);ASTValueString strValue;
      int intValue;
      ASTVariable var;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        strValue = valueString();
jjtn000.setValue(strValue);
        break;
        }
      case INTEGER_LITERAL:{
        intValue = integer();
jjtn000.setValue(intValue);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTValueString valueString() throws ParseException {/*@bgen(jjtree) ValueString */
      ASTValueString jjtn000 = new ASTValueString(this, JJTVALUESTRING);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);String str;
    try {
      str = string();
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setValue(str); jjtree.popNode(); {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTVariable variable() throws ParseException {/*@bgen(jjtree) Variable */
      ASTVariable jjtn000 = new ASTVariable(this, JJTVARIABLE);
      boolean jjtc000 = true;
      jjtree.openNodeScope(jjtn000);String idName, func, key;
      ASTValueble val;
    try {
      if (jj_2_7(2)) {
        jj_consume_token(DOL);
        jj_consume_token(LC);
        idName = identifier();
        jj_consume_token(RC);
jjtn000.setVariable(idName);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOL:{
          jj_consume_token(DOL);
          func = identifier();
          jj_consume_token(LP);
          key = string();
          jj_consume_token(COM);
          val = valueble();
          jj_consume_token(RP);
jjtn000.setFunction(func, key, val);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public String itemIdentifier(String prefix) throws ParseException {Token id;
      String idName;
    id = jj_consume_token(IDENTIFIER);
idName = id.image;
       if (! checkItemIdentifier(prefix, idName))
         {if (true) throw new Error(String.format("Not a valid item identifier: %s. Should include: %s", idName, prefix));}
       {if ("" != null) return idName;}
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {// do I need a specific class? For checking with a symtable ...
      Token id, part;
      String idName;
    id = jj_consume_token(IDENTIFIER);
idName = id.image;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(DOT);
      part = jj_consume_token(IDENTIFIER);
idName += "." + part.image;
    }
{if ("" != null) return idName;}
    throw new Error("Missing return statement in function");
  }

  final public String string() throws ParseException {Token tok; String str;
    tok = jj_consume_token(STRING_LITERAL);
str = dropCitaionMarks(tok.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(PLUS);
      tok = jj_consume_token(STRING_LITERAL);
{if ("" != null) return str += dropCitaionMarks(tok.image);}
    }
{if ("" != null) return str;}
    throw new Error("Missing return statement in function");
  }

  final public int integer() throws ParseException {Token num;
    num = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return Integer.parseInt(num.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_scan_token(LOB)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_scan_token(DATADICTION)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_scan_token(PRODLINE)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(DOL)) return true;
    if (jj_scan_token(LC)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_scan_token(PRODUCT)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_scan_token(COEFFICIENT)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PLE_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x4080,0x4080,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x4,0x400,0x0,0x400,0x800,0x1000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PLE_Parser(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PLE_Parser(InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PLE_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PLE_Parser(Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PLE_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new PLE_ParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PLE_Parser(PLE_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PLE_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la;
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
