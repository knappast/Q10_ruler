/* PLE_ParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PLE_ParserTokenManager.java */
package se.kaskware.q10.parser;

import java.io.IOException;
import java.io.PrintStream;

/** Token Manager. */
@SuppressWarnings("unused")public class PLE_ParserTokenManager implements PLE_ParserConstants {

  /** Debug output. */
  public  PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000000000L) != 0L)
            return 21;
         if ((active0 & 0x3fff0000L) != 0L)
         {
            jjmatchedKind = 60;
            return 19;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 84;
         if ((active0 & 0x100000000000L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active0 & 0x3fff0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 19;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000000L) != 0L)
            return 19;
         if ((active0 & 0x3eff0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 19;
         }
         return -1;
      case 3:
         if ((active0 & 0x3a7f0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 19;
         }
         if ((active0 & 0x4800000L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0x3a7f0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 19;
         }
         return -1;
      case 5:
         if ((active0 & 0x1a370000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 19;
         }
         if ((active0 & 0x20480000L) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x18320000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 6;
            }
            return 19;
         }
         if ((active0 & 0x2050000L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x1a320000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 19;
         }
         return -1;
      case 8:
         if ((active0 & 0x1a320000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
            return 19;
         }
         return -1;
      case 9:
         if ((active0 & 0x1a320000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 9;
            return 19;
         }
         return -1;
      case 10:
         if ((active0 & 0x8020000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0x12300000L) != 0L)
            return 19;
         return -1;
      case 11:
         if ((active0 & 0x8020000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 11;
            return 19;
         }
         return -1;
      case 12:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 12;
            return 19;
         }
         if ((active0 & 0x20000L) != 0L)
            return 19;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 36:
         return jjStopAtPos(0, 42);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 40:
         return jjStopAtPos(0, 34);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         return jjStopAtPos(0, 59);
      case 43:
         return jjStopAtPos(0, 56);
      case 44:
         return jjStopAtPos(0, 30);
      case 45:
         return jjStopAtPos(0, 54);
      case 46:
         return jjStartNfaWithStates_0(0, 43, 84);
      case 47:
         return jjStartNfaWithStates_0(0, 58, 21);
      case 58:
         return jjStopAtPos(0, 46);
      case 59:
         return jjStopAtPos(0, 40);
      case 60:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x8001000000000L);
      case 61:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 62:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x2000080000000L);
      case 63:
         return jjStopAtPos(0, 57);
      case 64:
         return jjStopAtPos(0, 41);
      case 91:
         return jjStopAtPos(0, 32);
      case 93:
         return jjStopAtPos(0, 37);
      case 95:
         return jjStartNfaWithStates_0(0, 44, 19);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8120000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x21000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2010000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 123:
         return jjStopAtPos(0, 33);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 125:
         return jjStopAtPos(0, 38);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 60:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 61:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x11020000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400000L);
      case 124:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 66:
      case 98:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 19);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2090000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 19);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2010000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2010000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x220000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x18100000L);
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 19);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 82:
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 19);
         break;
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x18000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8320000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x10200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0xa100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x12000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(10, 25, 19);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 78:
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 19);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 21, 19);
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 28, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 17, 19);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 27, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 84;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 13); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(38, 43); }
                  else if (curChar == 47)
                     { jjAddStates(14, 15); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(16, 18); }
                  else if (curChar == 39)
                     { jjAddStates(19, 20); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAddStates(21, 24); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAddStates(25, 30); }
                  }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     { jjCheckNAddStates(31, 33); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddStates(34, 36); }
                  }
                  break;
               case 21:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(27, 28); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 1:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 2:
                  if (curChar == 39 && kind > 13)
                     kind = 13;
                  break;
               case 4:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 5:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 2); }
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 7:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 9:
                  if (curChar == 34)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 13:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 43); }
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if (curChar == 47)
                     { jjAddStates(14, 15); }
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 23:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 24:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 27:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 28:
                  if (curChar == 42)
                     { jjCheckNAddStates(44, 46); }
                  break;
               case 29:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(30, 28); }
                  break;
               case 30:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(30, 28); }
                  break;
               case 31:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 32:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(21, 24); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 37:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(38, 43); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 48:
                  if (curChar != 48)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddStates(25, 30); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddTwoStates(50, 34); }
                  break;
               case 51:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddTwoStates(51, 34); }
                  break;
               case 52:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(52, 36); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(54, 36); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 13); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if (curChar != 46)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(47, 49); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(47, 49); }
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(61); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddTwoStates(61, 42); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddTwoStates(65, 42); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(69, 42); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 47); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 76:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(77); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(77, 47); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 79:
                  if (curChar != 46)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddStates(56, 58); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddStates(56, 58); }
                  break;
               case 82:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(83); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(83, 47); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(19); }
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 92)
                     { jjAddStates(59, 61); }
                  break;
               case 4:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAdd(2); }
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 11:
                  if (curChar == 92)
                     { jjAddStates(62, 64); }
                  break;
               case 12:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 22:
                  { jjAddStates(37, 39); }
                  break;
               case 27:
                  { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 29:
               case 30:
                  { jjCheckNAddTwoStates(30, 28); }
                  break;
               case 34:
                  if ((0x100000001000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 36:
                  if ((0x100000001000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(65, 66); }
                  break;
               case 42:
                  if ((0x5000000050L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(67, 68); }
                  break;
               case 47:
                  if ((0x5000000050L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 49:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAddTwoStates(50, 34); }
                  break;
               case 53:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(54, 36); }
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(69, 70); }
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(71, 72); }
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(73, 74); }
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(75, 76); }
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(77, 78); }
                  break;
               case 81:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(79, 80); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(16, 18); }
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(37, 39); }
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 29:
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(30, 28); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 84 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   56, 57, 62, 63, 66, 67, 42, 70, 71, 47, 74, 75, 78, 79, 21, 26,
   10, 11, 13, 1, 3, 33, 34, 35, 36, 49, 51, 34, 52, 36, 53, 43,
   44, 47, 38, 39, 42, 22, 23, 25, 10, 11, 15, 13, 28, 29, 31, 58,
   59, 42, 66, 67, 42, 70, 71, 47, 80, 81, 47, 4, 5, 7, 12, 14,
   16, 40, 41, 45, 46, 60, 61, 64, 65, 68, 69, 72, 73, 76, 77, 82,
   83,
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, "\54", "\76\76", "\133", "\173", "\50", "\74", "\74\74", "\135",
"\175", "\51", "\73", "\100", "\44", "\56", "\137", "\46\46", "\72", "\75", "\75\75",
"\76\75", "\76", "\74\75", "\41\75", "\41", "\55", "\174\174", "\53", "\77", "\57",
"\52", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken()
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PLE_ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public PLE_ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {

    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 84; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {

    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffffffffe881L,
};
static final long[] jjtoSkip = {
   0x7eL,
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[84];
    private final int[] jjstateSet = new int[2 * 84];


    protected int curChar;
}
